name: Build TEST

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - created

jobs:
  build_macos:
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install
        run: |
          echo ">>>>>>>>>>>>> 10 largest files"
          sudo find / -type f -exec du -h {} + 2>/dev/null | sort -rh | head -n 10
          df -h
          npm install
          df -h

      - name: Test
        run: |
          df -h
          npm run test
          df -h
          echo ">>>>>>>>>>>>> 10 largest files"
          sudo find / -type f -exec du -h {} + 2>/dev/null | sort -rh | head -n 10

      # - name: Build MacOS (dmg)
      #   if: ${{github.ref != 'refs/heads/main'}}
      #   run: |
      #     npm run build

      - name: Build and Release MacOS (dmg)
        # if: ${{github.ref == 'refs/heads/main'}}
        env:
          GITHUB_TOKEN: ${{secrets.github_token}}
          CSC_LINK: ${{secrets.MACOS_CSC_LINK}}
          CSC_KEY_PASSWORD: ${{secrets.MACOS_CSC_KEY_PASSWORD}}
          EP_PRE_RELEASE: true
        run: |
          echo ">>>>>>>>>>>>> 10 largest files"
          sudo find / -type f -exec du -h {} + 2>/dev/null | sort -rh | head -n 10
          hdiutil info
          df -h
          diskutil list
          # npm run publish
          echo ">>>>>>>>>>>>>tsc -p ."
          npx tsc -p .
          hdiutil info
          df -h
          echo ">>>>>>>>>>>>>electron-builder --publish never"
          npx electron-builder --publish never
          hdiutil info
          df -h
          echo ">>>>>>>>>>>>>electron-builder --publish always"
          npx electron-builder --publish always
          hdiutil info
          df -h
          echo ">>>>>>>>>>>>> 10 largest files"
          sudo find / -type f -exec du -h {} + 2>/dev/null | sort -rh | head -n 10

      # - name: Notarize MacOS (dmg)
      #   if: ${{github.ref == 'refs/heads/main'}}
      #   env:
      #     MACOS_NOTARIZATION_APPLE_ID: ${{secrets.MACOS_NOTARIZATION_APPLE_ID}}
      #     MACOS_NOTARIZATION_TEAM_ID: ${{secrets.MACOS_NOTARIZATION_TEAM_ID}}
      #     MACOS_NOTARIZATION_PWD: ${{secrets.MACOS_NOTARIZATION_PWD}}
      #   run: |
      #     # Store the notarization credentials to prevent the UI password dialog for blocking the CI
      #     echo "Create keychain profile"
      #     xcrun notarytool store-credentials "notary-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

      #     # Send the notarization request to the Apple's Notarization service and wait for the result.
      #     echo "Notarize app"
      #     xcrun notarytool submit "dist/Decentraland.dmg" --keychain-profile "notary-profile" --wait

      #     # Attach the staple to the executable, this allow the app to be validated by macOS
      #     # even when an internet connection is not available.
      #     echo "Attach staple"
      #     xcrun stapler staple "dist/Decentraland.dmg"

      #     # Validate the staple attached to the executable.
      #     echo "Validate staple"
      #     xcrun stapler validate "dist/Decentraland.dmg"

      # - name: Upload artifacts
      #   env:
      #     AWS_DEFAULT_REGION: us-east-1
      #     AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      #     AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      #     AWS_BUCKET: ${{secrets.S3_BUCKET}}
      #   if: ${{env.AWS_BUCKET != ''}}
      #   run: |
      #     node scripts/prepare-artifacts.js dmg
      #     npx @dcl/cdn-uploader@next --bucket ${{secrets.S3_BUCKET}} --local-folder output --bucket-folder "launcher-branch/${{github.ref_name}}"

