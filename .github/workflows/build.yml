name: Build

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - created

jobs:
  release:
    runs-on: ${{ matrix.os }}-latest

    strategy:
      matrix:
        include:
          - os: macos
            ext: dmg
          - os: ubuntu
            ext: AppImage
          - os: windows
            ext: exe

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14

      - name: Install
        run: npm install

      - name: Test
        run: npm run test

      - name: Build
        if: ${{github.ref != 'refs/heads/main' && matrix.os != 'macos' }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          npm run build

      - name: Build MacOS
        if: ${{github.ref != 'refs/heads/main' && matrix.os == 'macos' }}
        env:
          CSC_LINK: ${{ secrets.MACOS_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CSC_KEY_PASSWORD }}
          CSC_FOR_PULL_REQUEST: true
        run: |
          npm run build

      - name: Notarize MacOS
        if: ${{github.ref != 'refs/heads/main' && matrix.os == 'macos' }}
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.MACOS_NOTARIZATION_APPLE_ID }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.MACOS_NOTARIZATION_TEAM_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.MACOS_NOTARIZATION_PWD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          # echo "Create keychain profile"
          # xcrun notarytool store-credentials "notary-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          # xcrun notarytool submit "dist/Decentraland.dmg" --keychain-profile "notary-profile" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "dist/Decentraland.dmg"

          # Validate the notarization
          echo "Validate staple"
          xcrun stapler validate "dist/Decentraland.dmg"

      - name: Publish
        if: ${{ github.ref == 'refs/heads/main' && matrix.os != 'windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          EP_PRE_RELEASE: true
        run: |
          npm run publish

      - name: Build AppX
        if: ${{ github.ref != 'refs/heads/main' && matrix.os == 'windows' }}
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          npm run build:appx

      # MOVED OUT TO AZURE
      # - name: Publish AppX
      #   if: ${{ github.ref == 'refs/heads/main' && matrix.os == 'windows' }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.github_token }}
      #     EP_PRE_RELEASE: true
      #   run: |
      #     npm run publish:appx

      - name: Extract branch name
        uses: vazco/github-actions-branch-name@v1
        id: branch
      - name: Upload artifacts
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          node scripts/prepare-artifacts.js ${{ matrix.ext }}
          npx @dcl/cdn-uploader@next --bucket ${{ secrets.S3_BUCKET }} --local-folder output --bucket-folder "launcher-branch/${{ steps.branch.outputs.branch_name }}"
